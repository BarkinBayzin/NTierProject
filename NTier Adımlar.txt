
-- Core

Referanslar = Entity Framework(Nuget)
1)Ntier.Core isimli bir C# Library açýyoruz
1.1)Bu kütüphane içerisine Entity, Map ve Service klasörlerini ekliyoruz.
1.2.1)Entity içerine Enum klasörü açýyoruz, Statüleri enum olarak yerleþtiriyoruz.
1.2.2)IEntity interface oluþturuyoruz. Id tanýmlamasý yapýyoruz.
1.2.3)CoreEntity classý oluþturuyoruz. Ortal tüm propertyleri yazýp constructor içerisinde ön tanýmlama yapýyoruz.
1.3.1)Map sýnýfý yazýyoruz ve CoreEntity içerisinde var olan tüm propertylerin mapleme iþlemini "Fluent Api" kullanarak gerçekleþtiriyoruz.
1.4)Service içerisinde veritabaný üzerinde gerçekleþtirilecek ortak iþlemlerimizi içeren metotlarý ekliyoruz.

--Model--
Referanslar = NTier.Core, EntityFramework
1)NTier.Model isimli bir C# Library açýyoruz.
1.1)Kütüphane içerisine Context, Entities, Map klasörleri açýyoruz.
1.2)Entities klasöüründe AppUser, Category, OrderDetails, Orders, Product, SubCategory sýnýflarý açýyoruz.
1.3)Maps klasöründe tüm entitylerin mapleme iþlemlerini gerçekleþtiriyoruz. CoreMap sýnýfýndan miras alarak ortak propertler ekleniyor.
1.4)Context klasörü içerisine ProjectContext sýnfýný açýyoruz
1.4.1)Sýnýf içerisinde onModelCreating metodunu override ediyoruz ve yazmýþ olduðumuz map sýnýflarýný konfigürasyonlara ekliyoruz.
1.4.2)DBSetleri tanýmlýyoruz.
1.4.3)SaveChanges metodunu override ediyoruz. Bu sayede güncellenen ve yeni eklenen tüm entity'ler otomatik olarak bazý sütunlarýna deðerleri alýyor.(CreatedMachineName veya ModifiedDate vb..)
1.5)enable-migrations -enableAutomaticMigrations ile console üzerinden migrate ediyoruz. Update-database yapýyoruz.

--Service
Referanslar = NTier.Core, NTier.Model, EntityFramework(NuGet)
1)NTier.Service isimli bir C# Library açýyoruz.
1.1)Kütüphane içerisine Base ve Option isimli iki klasör açýyoruz.
1.2)Base içerisinde BaseService sýnýfýný açýyoruz. Bu sýnýf içerisine ICoreService üzerinede tanýmlanmýþ olan tüm metotlarýn gövdelerini ekliyoruz.
1.3)Option klasörü içerisine tüm entityler service olarak açýyorz. Entity'e özel metotlarý varsa eðer ekliyoruz.

--UI--
Referanslar = NTier.Core , NTier.Model , NTier.Service , EntityFramework(NuGet)
1)Proje içerisine layout oluþturuyoruz.
2)Partial View oluþturarak Kategori menüsünü layout içerisine ekliyoruz.(HomeController içerisindeki [ChildActionOnly] bu partialView için. _CategoryList menüyü içermektedir.)
!!NOT: HomeController içerisinde FormsAuthentication iþlemleri API aþamasýna býrakýlmalýdýr.
3)ProductController ile Ürün listeleme metotlarýmýzý oluþturuyoruz.
4)Sepete ekleme iþlemleri için Cart sýnýfýný Models altýna ekliyoruz.(Session örneðindeki sepet iþlemlerinin aynýsýný ekliyoruz)
-Bazý sayfalarda bulunan "Regex'ler" anlatým için eklenmiþtir.öðrenciler bu regular expression'larý internetten bulabilir ve projelerine ekleyebilirler.Proje içerisinde iþleri belli input alanlarýnda yazým kurallarý atamaktýr(Email içerisinde @ iþareti olmasý, büyük/küçük harf kurallarý vb...)

--UI/Admin(AREA)--
1)Proje içerisine Admin Area ekliyoruz. Route.Config içerisine area kodunu ekliyoruz.
1.1)Admin Area için Layout oluþturuyoruz.
1.2)CRUD iþlemleri tüm entityler için controller'lar içerisine ekleniyor.
2)Helpers klasöründeki ImageUploader sýnýfýný oluþturuyoruz.(Bu sýnýf ile ürün ve product image ekleme iþlemlerimiz için path oluþturuyoruz)

--UI/Member(AREA)--
1)Member alanýnda Sepet(Cart),Checkout(sipariþ tamamlama),Register(Yeni üye kaydý) iþlemlerimiz için controller'lar oluþturuyoruz.
Sepet için ProductCart sýnýfýný models içerisine eklemeyi unutmamalýyýz.

--NTier.AuthService--
Referanslar = NTier.Core , NTier.Model , NTier.Service
1)Solution içerisine API projesi ekliyoruz.
2)Login.cshtml içerisine eklediðimiz ajax kodu ile kullanýcý bilgilerini API'ye gönderiyoruz.
3)Api içerisindeki controller ile gelen verilere göre yönlendirme gerçekleþtiriyoruz.(ID bu aþamada url üzerinden iletilecektir ve UI-HomeController içerisine FormsAuthentication eklenecektir. Web.Config içerisine authentication için gerekli bölümü eklemeyi unutmayýn.)
4)Logout için _Layout içerisine link ekliyoruz ve Api içerisindeki controller'a yönlendirme yapýyoruz.


																--NOTLAR--

--Web servis token based authentication içermediði için tekrar yönlendirme yapmaktadýr. FormsAuthentication iki domain arasýnda ayný seansý taþýyamamaktadýr. Taþýmasý için veritabanýnda ayarlama yapmak gereklidir. Amaç öðrencilerin servisleri nasýl projeye entegre edebileceklerini göstermektir.

--[CustomAuthorize(Role.Admin)] ve [CustomAuthorize(Role.Member,Role.Admin)] Attributes klasörü içerisindeki CustomAuthorize sýnýfýnda tanýmlanmaktadýr. Birden fazla rol bu sayede belirtilebiliyor.

--ImageUploader sýnýfý Helpers klasörü altýnda bulunmaktadýr.Ýþi bir dosya gelmiþ mi bunu kontrol etmek ve eðer gelmiþse dosya adýný guid ile deðiþtirmektir.Arkasýndan Uploads isimli klasöre kaydetmekte. 0-1-2 gibi durumlarýn ne anlama geldiði sýnýf içerisinde belirtilmektedir.

--Sepet iþlemleri MVC session içerisindeki kodlarla aynýdýr.